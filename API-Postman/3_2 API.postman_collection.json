{
	"info": {
		"_postman_id": "b223f429-b4e2-4c4f-b925-19d2ccb22df8",
		"name": "3_2_API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1_200_right string",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}first",
					"host": [
						"{{url}}first"
					]
				}
			},
			"response": []
		},
		{
			"name": "2_salary_1_5y",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json\r",
							"let respData = pm.response.json();\r",
							"console.log(respData);\r",
							"\r",
							"//Проверить, что name в ответе равно name s request + age, salary\r",
							"let resp_name = respData.name;\r",
							"let resp_age = +respData.age;\r",
							"let resp_salary = +respData.salary;\r",
							"\r",
							"pm.test('Check_name_resp', function () {\r",
							"  pm.expect(resp_name).to.eql(\"Cat\");\r",
							"});\r",
							"\r",
							"pm.test(\"name matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Cat\");\r",
							"});\r",
							"\r",
							"pm.test('Check_age_resp', function () {\r",
							"  pm.expect(resp_age).to.eql(33);\r",
							"});\r",
							"\r",
							"pm.test('Check_salary_resp', function () {\r",
							"  pm.expect(resp_salary).to.eql(3000);\r",
							"});\r",
							"\r",
							"//Спарсить request\r",
							"let reqData = request.data;\r",
							"console.log(reqData);\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.) + age, salary\r",
							"let req_name = reqData.name;\r",
							"let req_age = +reqData.age;\r",
							"let req_salary = +reqData.salary;\r",
							"\r",
							"pm.test('Check_name_req', function () {\r",
							"  pm.expect(req_name).to.eql(\"Cat\");\r",
							"});\r",
							"\r",
							"pm.test('Check_age_req', function () {\r",
							"  pm.expect(req_age).to.eql(33);\r",
							"});\r",
							"\r",
							"pm.test('Check_salary_req', function () {\r",
							"  pm.expect(req_salary).to.eql(3000);\r",
							"});\r",
							"\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"let resp_family = respData.family;\r",
							"console.log(resp_family);\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"//let resp_family = respData.family;\r",
							"//let resp_salary_15y = +reqData.family.u_salary_1_5_year;\r",
							"pm.test('Check_u_salary_15_req', function () {\r",
							"  //pm.expect(resp_salary_15y).to.eql(req_salary*4);\r",
							"  pm.expect(respData.family.u_salary_1_5_year).to.eql(reqData.salary*4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Cat",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_3",
					"host": [
						"{{url}}user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "3_dog",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"let respData = pm.response.json();\r",
							"console.log(respData);\r",
							"\r",
							"// Спарсить request.\r",
							"//let reqData = request.data;\r",
							"let reqData = pm.request.url.query.all();\r",
							"console.log('ups', reqData);\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.) + age, salary\r",
							"let resp_name = respData.name;\r",
							"let resp_age = +respData.age;\r",
							"let resp_salary = +respData.salary;\r",
							"\r",
							"pm.test('Check_name_resp', function () {\r",
							"  pm.expect(resp_name).to.eql('Vasiliy');\r",
							"});\r",
							"\r",
							"pm.test('Check_age_resp', function () {\r",
							"  pm.expect(resp_age).to.eql(32);\r",
							"});\r",
							"\r",
							"pm.test('Check_salary_resp', function () {\r",
							"  pm.expect(resp_salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(respData.family);\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"pm.test('Check_dog_name_exist', function() {\r",
							"    pm.expect(respData.family.pets.dog.name).exist;\r",
							"});\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age.\r",
							"pm.test('Check_dog_age_exist', function() {\r",
							"    pm.expect(respData.family.pets.dog.age).exist;\r",
							"});\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"pm.test('Check_dog_name_eql', function() {\r",
							"    pm.expect(respData.family.pets.dog.name).to.eql('Luky');\r",
							"});\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"pm.test('Check_dog_age_eql', function() {\r",
							"    pm.expect(respData.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_3?age=32&salary=1000&name=Vasiliy",
					"host": [
						"{{url}}object_info_3"
					],
					"query": [
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "1000"
						},
						{
							"key": "name",
							"value": "Vasiliy"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4_env_cycle_for",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//let reg = \r",
							"\r",
							"//Массив pm.request.url.query.all() содержит все параметры запроса как объекты. Получаем параметры в виде словаря:\r",
							"let requestData = {};\r",
							"pm.request.url.query.all().forEach((param) => { requestData[param.key] = param.value});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let respData = pm.response.json();\r",
							"\r",
							"//Спарсить request.\r",
							"let reqData = request.data;\r",
							"\r",
							"//Проверить, что name в ответе (responce!!!) равно name s request (name забрать из request.)\r",
							"pm.test('Check_name_resp=req', function () {\r",
							"  pm.expect(respData.name).to.eql('John');\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе (responce!!!) равно age из request (age забрать из request.)\r",
							"pm.test('Check_age_resp=req', function () {\r",
							"  pm.expect(respData.age).to.eql(32);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр salary из request.\r",
							"console.log(reqData.salary);\r",
							"\r",
							"//Вывести в консоль параметр salary из response.\r",
							"console.log(respData.salary);\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(respData.salary[0]);\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(respData.salary[1]);\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(respData.salary[2]);\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test('Eql_salary_resp_0', function() {\r",
							"    pm.expect(+respData.salary[0]).to.eql(+requestData.salary);\r",
							"});\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test('Eql_salary_resp_1', function() {\r",
							"    pm.expect(+respData.salary[1]).to.eql(+requestData.salary*2);\r",
							"});\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test('Eql_salary_resp_2', function() {\r",
							"    pm.expect(+respData.salary[2]).to.eql(+requestData.salary*3);\r",
							"});\r",
							"\r",
							"//Передать в окружение временную переменную name\r",
							"pm.environment.set(\"name\", respData.name);\r",
							"\r",
							"//Передать в окружение временную переменную age\r",
							"pm.environment.set(\"age\", respData.age);\r",
							"\r",
							"//Передать в окружение времённую переменную salary\r",
							"pm.environment.set('salary', respData.salary);\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for ( let i of respData.salary ) {\r",
							"    console.log('salary = ', i);\r",
							"};\r",
							"\r",
							"for ( let i in respData.salary ) {\r",
							"    console.log('salary2 = ', respData.salary[i]);\r",
							"};\r",
							"\r",
							"\r",
							"for (var i = 0; i < respData.salary.length; i++) {\r",
							"    console.log('salary1 = ', respData.salary[i]);\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}object_info_4?name=John&age=32&salary=1000",
					"host": [
						"{{url}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "John"
						},
						{
							"key": "age",
							"value": "32"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5_eql_exist_cycle",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" //Вставить параметр salary из окружения в request salary\r",
							" //Вставить параметр age из окружения в age\r",
							" //Вставить параметр name из окружения в name\r",
							" //Отправить запрос.\r",
							" //Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							" //Спарсить response body в json.\r",
							"let respData=JSON.parse(responseBody);\r",
							"\r",
							" //Спарсить request.\r",
							"let reqData = request.data;\r",
							"console.log(reqData);\r",
							"\r",
							" //Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test('jsondata exist param start_qa_salary', function() {\r",
							"    pm.expect(respData.start_qa_salary).exist;\r",
							"});\r",
							"\r",
							" //Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							" pm.test('jsondata exist param qa_salary_after_6_months', function() {\r",
							"    pm.expect(respData.qa_salary_after_6_months).exist;\r",
							"});\r",
							"\r",
							" //Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"  pm.test('jsondata exist param qa_salary_after_12_months', function() {\r",
							"    pm.expect(respData.qa_salary_after_12_months).exist;\r",
							"});\r",
							"\r",
							" //Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							" //let qa_salary_after_1_5_year = respData.qa_salary_after_1.5_year;\r",
							"   pm.test('jsondata exist param qa_salary_after_1.5_year', function() {\r",
							"    pm.expect(+respData[\"qa_salary_after_1_5_year\"]).exist;\r",
							"});\r",
							"\r",
							" //Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"  //let qa_salary_after_3_5_year = respData.qa_salary_after_3.5_years;\r",
							"   pm.test('jsondata exist param qa_salary_after_1.5_year', function() {\r",
							"    pm.expect(+respData[\"qa_salary_after_3.5_years\"]).exist;\r",
							"});\r",
							"\r",
							" //Проверить, что json response имеет параметр person\r",
							"pm.test('jsondata exist param person', function() {\r",
							"    pm.expect(respData.person).exist;\r",
							"});\r",
							"\r",
							" //Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test('Eql_salary_resp', function() {\r",
							"    pm.expect(+respData.start_qa_salary).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							" //Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test('Eql_salary_2y', function() {\r",
							"    pm.expect(+respData.qa_salary_after_6_months).to.eql(+reqData.salary*2);\r",
							"});\r",
							"\r",
							" //Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test('Eql_salary_12m', function() {\r",
							"    pm.expect(+respData.qa_salary_after_12_months).to.eql(+reqData.salary*2.7);\r",
							"});\r",
							"\r",
							" //Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test('Eql_salary_18m', function() {\r",
							"    pm.expect(+respData['qa_salary_after_1.5_year']).to.eql(+reqData.salary*3.3);\r",
							"});\r",
							"\r",
							" //Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test('Eql_salary_3.5y', function() {\r",
							"    pm.expect(+respData['qa_salary_after_3.5_years']).to.eql(+reqData.salary*3.8);\r",
							"});\r",
							"\r",
							" //Проверить, что в параметре person, 1-й элемент из u_name равен name из request (name забрать из request.)\r",
							"pm.test('Eql_salary_u_name', function() {\r",
							"    pm.expect(respData.person.u_name[0]).to.eql(reqData.name);\r",
							"}); \r",
							"\r",
							" //Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test('Eql_salary_u_age', function() {\r",
							"    pm.expect(+respData.person.u_age).to.eql(+reqData.age);\r",
							"}); \r",
							"\r",
							" //Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test('Eql_salary_u_salary', function() {\r",
							"    pm.expect(+respData.person.u_salary_5_years).to.eql(+reqData.salary*4.2);\r",
							"}); \r",
							"\r",
							" //Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for ( let i in respData.person) {\r",
							"    console.log('person item = ', respData.person[i]);\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "6_token_login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var respData = pm.response.json();\r",
							"pm.environment.set(\"token\", respData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "admin",
							"type": "text"
						},
						{
							"key": "password",
							"value": "123",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}login",
					"host": [
						"{{url}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "7_required field login_new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"let salary = jsonData.salary[0];\r",
							"let salary2 = +jsonData.salary[1];  // + = parseInt (перевели в Number)\r",
							"let salary3 = +jsonData.salary[2];  \r",
							"\r",
							"//console.log(\"salary = \" + salary, typeof(salary));  //проверили тип salary\r",
							"//console.log(\"salary2 = \" + salary2, typeof(salary2));\r",
							"//console.log(\"salary3 = \" + salary3, typeof(salary3));\r",
							"\r",
							"//console.log(\"salary3_numb = \" + parseInt(salary3), typeof(parseInt(salary3))); \r",
							"//проверили тип и перевели в Int\r",
							"\r",
							"//console.log(salary, salary2, salary3);\r",
							"//тоже тип (без \"\" or \"\")\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"name matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Alice\");\r",
							"});\r",
							"\r",
							"pm.test('Check_salary', function () {\r",
							"    pm.expect(salary).to.eql(2200);\r",
							"});\r",
							"\r",
							"pm.test('Check_salary_n', function () {\r",
							"    pm.expect(salary2).to.eql(4400);\r",
							"});\r",
							"pm.test('Check_salary_n1', function () {\r",
							"    pm.expect(salary2).to.eql(salary*2);\r",
							"});\r",
							"\r",
							"pm.test('Check_salary_nn', function () {\r",
							"    pm.expect(salary3).to.eql(6600);\r",
							"});\r",
							"pm.test('Check_salary_nn1', function () {\r",
							"    pm.expect(salary3).to.eql(salary*3);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "21",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2200",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Alice",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}new_data",
					"host": [
						"{{url}}new_data"
					]
				}
			},
			"response": []
		}
	]
}