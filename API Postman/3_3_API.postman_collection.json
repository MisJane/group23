{
	"info": {
		"_postman_id": "dcb4fcce-35f8-4835-873f-237e5c2e95d4",
		"name": "3_3_API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1_login",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"login\":\"admin\", \"password\":\"123\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}login",
					"host": [
						"{{url}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "2_user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе. \r",
							"//схема, которая будет проверять соответствует ли json в ответе сервера этой самой json схеме\r",
							"let schema = {\r",
							"    \"type\":\"object\",\r",
							"        \"properties\": {\r",
							"        \"person\": { \"type\": \"object\",\r",
							"            \"properties\":{\r",
							"                \"u_age\": {\"type\": \"integer\"},\r",
							"                \"u_name\": { \"type\": \"array\", \"minItems\": 1, \"maxItems\": 3, \r",
							"                    \"items\": [\r",
							"                        {\"type\": \"string\"},\r",
							"                        {\"type\": \"integer\"},\r",
							"                        {\"type\": \"integer\"}\r",
							"                    ] \r",
							"                },\r",
							"                \"u_salary_1_5_year\": { \"type\": \"integer\" }\r",
							"            },\r",
							"            \"required\": [\"u_age\", \"u_name\", \"u_salary_1_5_year\"] \r",
							"        },\r",
							"    \"qa_salary_after_12_months\": { \"type\": \"integer\" },\r",
							"    \"qa_salary_after_6_months\": { \"type\": \"integer\" },\r",
							"    \"start_qa_salary\": { \"type\": \"integer\" }    \r",
							"    },\r",
							"    \"required\": [\"qa_salary_after_12_months\", \"qa_salary_after_6_months\", \"start_qa_salary\"]  \r",
							"};\r",
							"\r",
							"pm.test('schema is valid', function(){\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"//проверка эквивалентности start_qa_salary\r",
							"let respData=JSON.parse(responseBody);\r",
							"//let respData=pm.response.json(); //Любым способом\r",
							"let reqData=JSON.parse(request.data);\r",
							"\r",
							"//проверим коэффициент 1 для salary и start_qa_salary\r",
							"pm.test('start_qa_salary равно salary из request', function(){\r",
							"    pm.expect(+respData.salary).to.eql(+reqData);\r",
							"});\r",
							"\r",
							"//найдем коэффициенты\r",
							"let k1=+respData.person.u_salary_1_5_year/+respData.start_qa_salary;\r",
							"let k2=+respData.qa_salary_after_6_months/+respData.start_qa_salary;\r",
							"let k3=+respData.qa_salary_after_12_months/+respData.start_qa_salary;\r",
							"let req_salary = +reqData.salary;\r",
							"\r",
							"//проверим коэффициент k1 через 1.5 года\r",
							"pm.test('Check_u_salary_15', function () {\r",
							"   pm.expect(+respData.person.u_salary_1_5_year).to.eql(+respData.start_qa_salary*k1);\r",
							"});\r",
							"\r",
							"//или проверим коэффициент k1 с salary из request\r",
							"pm.test('Check_u_salary_15_req', function () {\r",
							"   pm.expect(+respData.person.u_salary_1_5_year).to.eql(+reqData.salary*k1);\r",
							"});\r",
							"\r",
							"//проверим коэффициент k2 для salary через 6 months с salary из request\r",
							"pm.test('Check_u_salary_6m_req', function () {\r",
							"   pm.expect(+respData.qa_salary_after_6_months).to.eql(+reqData.salary*k2);\r",
							"});\r",
							"\r",
							"//проверим коэффициент k3 для salary через 12 months с salary из request\r",
							"pm.test('Check_u_salary_12m_req', function () {\r",
							"   pm.expect(+respData.qa_salary_after_12_months).to.eql(+reqData.salary*k3);\r",
							"});\r",
							"\r",
							"//4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"let isalary=respData.person.u_salary_1_5_year;\r",
							"// pm.globals.set(\"isalary\", isalary);\r",
							"\r",
							"pm.test('send request test is OK', function() {\r",
							"\r",
							"pm.sendRequest({\r",
							"    url: pm.environment.get(\"url\")+\"get_test_user\",\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'multipart/form-data',\r",
							"          },\r",
							"      body: {\r",
							"          mode: 'formdata',\r",
							"          formdata: [\r",
							"            {key: \"name\", value: pm.environment.get(\"name\"), disabled: false},\r",
							"            {key: \"age\", value: pm.environment.get(\"age\"), disabled: false},\r",
							"            {key: \"salary\", value: isalary,  disabled: false},\r",
							"            {key: \"auth_token\", value: pm.environment.get(\"auth_token\"), disabled: false}\r",
							"        ]\r",
							"      }\r",
							"},  function(err, response) {\r",
							"  const respData = response.json();\r",
							"  console.log(respData, \"Status: \"+response.status, \"Code: \"+response.code);\r",
							"});\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"{{name}}\", \"age\":{{age}}, \"salary\":{{salary}}, \"auth_token\":\"{{auth_token}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}user_info",
					"host": [
						"{{url}}user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "3_new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Status code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе\r",
							"let schema = {\r",
							" \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": { \"type\": \"integer\" },\r",
							"        \"name\": { \"type\": \"string\" },\r",
							"        \"salary\": { \"type\": \"array\", \"minItems\": 1, \"maxItems\": 3, \r",
							"            \"items\": [\r",
							"                {\"type\": \"integer\"},\r",
							"                {\"type\": \"string\"},\r",
							"                {\"type\": \"string\"}\r",
							"            ]\r",
							"        },\r",
							"    },\r",
							"    \"required\": [\"age\", \"name\", \"salary\"]  \r",
							"}\r",
							"\r",
							"pm.test('schema is valid', function(){\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"let respData=JSON.parse(responseBody);\r",
							"pm.test('comparison of salary[1] ratios', function(){\r",
							"    pm.expect(+respData.salary[1]).to.eql(+respData.salary[0]*2)\r",
							"});\r",
							"\r",
							"pm.test('comparison of salary[2] ratios', function(){\r",
							"    pm.expect(+respData.salary[2]).to.eql(+respData.salary[0]*3)\r",
							"});\r",
							"\r",
							"//4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"pm.test('comparison of array elements (salary)', function(){\r",
							"    pm.expect(+respData.salary[2]>+respData.salary[1]&&+respData.salary[2]>+respData.salary[0]).to.be.true;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}new_data",
					"host": [
						"{{url}}new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "4_test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Status code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе\r",
							"let schema={\r",
							"     \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": {\"type\": \"integer\"},\r",
							"        \"daily_food\": {\"type\": \"number\"},\r",
							"        \"daily_sleep\": {\"type\": \"number\"},\r",
							"        \"name\": {\"type\": \"string\"}\r",
							"    },\r",
							"    \"required\": [\"age\", \"name\", \"daily_food\", \"daily_sleep\"]  \r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function(){\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"//В ответе указаны коэффициенты умножения weight ('daily_food':weight * 0.012; 'daily_sleep': weight * 2.5), напишите тесты по проверке правильности результата перемножения на коэффициент\r",
							"let respData=JSON.parse(responseBody);\r",
							"let reqData=request.data;\r",
							"// console.log(respData);\r",
							"// console.log(reqData);\r",
							"\r",
							"pm.test('check coefficient daily_food', function() {\r",
							"    pm.expect(+reqData.daily_food).to.eql(+respData.weight*0.012);\r",
							"});\r",
							"\r",
							"pm.test('check coefficient daily_sleep', function() {\r",
							"    pm.expect(+reqData.daily_sleep).to.eql(+respData.weight*2.5);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "85",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}test_pet_info",
					"host": [
						"{{url}}test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "5_get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Status code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе по валидатору\r",
							"let schema={\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
							"    \"$id\": \"http://example.com/example.json\",\r",
							"    \"type\": \"object\",\r",
							"    \"title\": \"The root schema\",\r",
							"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
							"    \"default\": {},\r",
							"    \"examples\": [\r",
							"        {\r",
							"            \"age\": \"37\",\r",
							"            \"family\": {\r",
							"                \"children\": [\r",
							"                    [\r",
							"                        \"Alex\",\r",
							"                        24\r",
							"                    ],\r",
							"                    [\r",
							"                        \"Kate\",\r",
							"                        12\r",
							"                    ]\r",
							"                ],\r",
							"                \"u_salary_1_5_year\": 4000\r",
							"            },\r",
							"            \"name\": \"Mark\",\r",
							"            \"salary\": 1000\r",
							"        }\r",
							"    ],\r",
							"    \"required\": [\r",
							"        \"age\",\r",
							"        \"family\",\r",
							"        \"name\",\r",
							"        \"salary\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"$id\": \"#/properties/age\",\r",
							"            \"type\": \"string\",\r",
							"            \"title\": \"The age schema\",\r",
							"            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"            \"default\": \"\",\r",
							"            \"examples\": [\r",
							"                \"37\"\r",
							"            ]\r",
							"        },\r",
							"        \"family\": {\r",
							"            \"$id\": \"#/properties/family\",\r",
							"            \"type\": \"object\",\r",
							"            \"title\": \"The family schema\",\r",
							"            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"            \"default\": {},\r",
							"            \"examples\": [\r",
							"                {\r",
							"                    \"children\": [\r",
							"                        [\r",
							"                            \"Alex\",\r",
							"                            24\r",
							"                        ],\r",
							"                        [\r",
							"                            \"Kate\",\r",
							"                            12\r",
							"                        ]\r",
							"                    ],\r",
							"                    \"u_salary_1_5_year\": 4000\r",
							"                }\r",
							"            ],\r",
							"            \"required\": [\r",
							"                \"children\",\r",
							"                \"u_salary_1_5_year\"\r",
							"            ],\r",
							"            \"properties\": {\r",
							"                \"children\": {\r",
							"                    \"$id\": \"#/properties/family/properties/children\",\r",
							"                    \"type\": \"array\",\r",
							"                    \"title\": \"The children schema\",\r",
							"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
							"                    \"default\": [],\r",
							"                    \"examples\": [\r",
							"                        [\r",
							"                            [\r",
							"                                \"Alex\",\r",
							"                                24\r",
							"                            ],\r",
							"                            [\r",
							"                                \"Kate\",\r",
							"                                12\r",
							"                            ]\r",
							"                        ]\r",
							"                    ],\r",
							"                    \"additionalItems\": true,\r",
							"                    \"items\": {\r",
							"                        \"$id\": \"#/properties/family/properties/children/items\",\r",
							"                        \"anyOf\": [\r",
							"                            {\r",
							"                                \"$id\": \"#/properties/family/properties/children/items/anyOf/0\",\r",
							"                                \"type\": \"array\",\r",
							"                                \"title\": \"The first anyOf schema\",\r",
							"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
							"                                \"default\": [],\r",
							"                                \"examples\": [\r",
							"                                    [\r",
							"                                        \"Alex\",\r",
							"                                        24\r",
							"                                    ]\r",
							"                                ],\r",
							"                                \"additionalItems\": true,\r",
							"                                \"items\": {\r",
							"                                    \"$id\": \"#/properties/family/properties/children/items/anyOf/0/items\",\r",
							"                                    \"anyOf\": [\r",
							"                                        {\r",
							"                                            \"$id\": \"#/properties/family/properties/children/items/anyOf/0/items/anyOf/0\",\r",
							"                                            \"type\": \"string\",\r",
							"                                            \"title\": \"The first anyOf schema\",\r",
							"                                            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"                                            \"default\": \"\",\r",
							"                                            \"examples\": [\r",
							"                                                \"Alex\"\r",
							"                                            ]\r",
							"                                        },\r",
							"                                        {\r",
							"                                            \"$id\": \"#/properties/family/properties/children/items/anyOf/0/items/anyOf/1\",\r",
							"                                            \"type\": \"integer\",\r",
							"                                            \"title\": \"The second anyOf schema\",\r",
							"                                            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"                                            \"default\": 0,\r",
							"                                            \"examples\": [\r",
							"                                                24\r",
							"                                            ]\r",
							"                                        }\r",
							"                                    ]\r",
							"                                }\r",
							"                            },\r",
							"                            {\r",
							"                                \"$id\": \"#/properties/family/properties/children/items/anyOf/1\",\r",
							"                                \"type\": \"array\",\r",
							"                                \"title\": \"The second anyOf schema\",\r",
							"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
							"                                \"default\": [],\r",
							"                                \"examples\": [\r",
							"                                    [\r",
							"                                        \"Kate\",\r",
							"                                        12\r",
							"                                    ]\r",
							"                                ],\r",
							"                                \"additionalItems\": true,\r",
							"                                \"items\": {\r",
							"                                    \"$id\": \"#/properties/family/properties/children/items/anyOf/1/items\",\r",
							"                                    \"anyOf\": [\r",
							"                                        {\r",
							"                                            \"$id\": \"#/properties/family/properties/children/items/anyOf/1/items/anyOf/0\",\r",
							"                                            \"type\": \"string\",\r",
							"                                            \"title\": \"The first anyOf schema\",\r",
							"                                            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"                                            \"default\": \"\",\r",
							"                                            \"examples\": [\r",
							"                                                \"Kate\"\r",
							"                                            ]\r",
							"                                        },\r",
							"                                        {\r",
							"                                            \"$id\": \"#/properties/family/properties/children/items/anyOf/1/items/anyOf/1\",\r",
							"                                            \"type\": \"integer\",\r",
							"                                            \"title\": \"The second anyOf schema\",\r",
							"                                            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"                                            \"default\": 0,\r",
							"                                            \"examples\": [\r",
							"                                                12\r",
							"                                            ]\r",
							"                                        }\r",
							"                                    ]\r",
							"                                }\r",
							"                            }\r",
							"                        ]\r",
							"                    }\r",
							"                },\r",
							"                \"u_salary_1_5_year\": {\r",
							"                    \"$id\": \"#/properties/family/properties/u_salary_1_5_year\",\r",
							"                    \"type\": \"integer\",\r",
							"                    \"title\": \"The u_salary_1_5_year schema\",\r",
							"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
							"                    \"default\": 0,\r",
							"                    \"examples\": [\r",
							"                        4000\r",
							"                    ]\r",
							"                }\r",
							"            },\r",
							"            \"additionalProperties\": true\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"$id\": \"#/properties/name\",\r",
							"            \"type\": \"string\",\r",
							"            \"title\": \"The name schema\",\r",
							"            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"            \"default\": \"\",\r",
							"            \"examples\": [\r",
							"                \"Mark\"\r",
							"            ]\r",
							"        },\r",
							"        \"salary\": {\r",
							"            \"$id\": \"#/properties/salary\",\r",
							"            \"type\": \"integer\",\r",
							"            \"title\": \"The salary schema\",\r",
							"            \"description\": \"An explanation about the purpose of this instance.\",\r",
							"            \"default\": 0,\r",
							"            \"examples\": [\r",
							"                1000\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"additionalProperties\": true\r",
							"}\r",
							"\r",
							"pm.test('Schema is valid', function(){\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе ручками\r",
							"const schema1 = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": {\"type\": \"string\"},\r",
							"        \"name\": {\"type\": \"string\"},\r",
							"        \"salary\": {\"type\": \"integer\"},\r",
							"        \"family\": { \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"children\": {\r",
							"                    \"type\": \"array\", \"minItems\": 1, \"maxItems\": 2, \r",
							"                        \"items\": [\r",
							"                            {\"type\": \"array\"},\r",
							"                        ],\r",
							"                },\r",
							"            },\r",
							"            \"required\": [\"children\"]  \r",
							"        },\r",
							"    },\r",
							"    \"required\": [\"age\", \"name\", \"salary\"]  \r",
							"};\r",
							"\r",
							"pm.test(\"Schema1 is valid\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema1);\r",
							"    console.log(schema1);\r",
							"});\r",
							"\r",
							"//3) Проверить, что занчение поля name = значению переменной name из окружения\r",
							"let respData=JSON.parse(responseBody);\r",
							"let reqData=request.data;\r",
							"let envname=pm.environment.get('name');\r",
							"let envage=+pm.environment.get('age');\r",
							"\r",
							"pm.test('check name value', function() {\r",
							"    pm.expect(reqData.name).to.eql(envname);\r",
							"});\r",
							"\r",
							"//4) Проверить, что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"pm.test('check age value', function() {\r",
							"    pm.expect(+reqData.age).to.eql(envage);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}get_test_user",
					"host": [
						"{{url}}get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "6_currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let respData=pm.response.json();\r",
							"\r",
							"var icode = respData[Math.floor(Math.random()*respData.length)];\r",
							"\r",
							"pm.environment.set(\"curr_code\", icode.Cur_ID);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    console.log(\"Получили и записали случайный номер курса ->\", pm.environment.get(\"curr_code\"));\r",
							"});\r",
							"\r",
							"// pm.test('send request test is OK', function() {\r",
							"    for (i = 0; i < respData.length; i++)\r",
							"        pm.sendRequest({\r",
							"            url: pm.environment.get(\"url\")+\"curr_byn\",\r",
							"            method: 'POST',\r",
							"            header: {\r",
							"                'Content-Type': 'multipart/form-data',\r",
							"            },\r",
							"            body: {\r",
							"            mode: 'formdata',\r",
							"            formdata: [\r",
							"                {key: \"curr_code\", value: respData[i].Cur_ID,  disabled: false},\r",
							"                // {key: \"curr_code\", value: 498,  disabled: false},\r",
							"                {key: \"auth_token\", value: pm.environment.get(\"auth_token\"), disabled: false}\r",
							"            ]\r",
							"        }\r",
							"    },  function(err, response) {\r",
							"            if (pm.response.code=200) \r",
							"            //   pm.test(\"Body matches string Cur_OfficialRate\", function () {\r",
							"            //     pm.expect(pm.response.text()).to.include(\"Cur_OfficialRate\");\r",
							"            //     }), console.log(pm.response.json())\r",
							"                {\r",
							"                JSON_data = response.json();\r",
							"                if (JSON_data.Cur_OfficialRate>0) {\r",
							"                console.log(JSON_data, \"Status: \"+response.status, \"Code: \"+response.code);\r",
							"            }\r",
							"        }\r",
							"    // });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}currency",
					"host": [
						"{{url}}currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "7_curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let schema={\r",
							"    \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"            \"Cur_Abbreviation\": {\"type\": \"string\"},\r",
							"            \"Cur_ID\": {\"type\": \"integer\"},\r",
							"            \"Cur_Name\": {\"type\": \"string\"},\r",
							"            \"Cur_OfficialRate\": {\"type\": \"number\"},\r",
							"            \"Cur_Scale\": {\"type\": \"integer\"},\r",
							"            \"Date\": {\"type\": \"string\"}\r",
							"        },\r",
							"        \"required\": [\"Cur_Abbreviation\", \"Cur_ID\", \"Cur_Name\", \"Cur_OfficialRate\", \"Cur_Scale\", \"Date\"]  \r",
							"}\r",
							"pm.test('Schema is valid', function(){\r",
							"    pm.response.to.have.jsonSchema(schema)\r",
							"});\r",
							"\r",
							"//если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"\r",
							"// если поле есть, пишем в консоль инфу про фалюту в виде response\r",
							"if (pm.response.code=200, \r",
							"        pm.test(\"Body matches string Cur_OfficialRate\", function () {\r",
							"        pm.expect(pm.response.text()).to.include(\"Cur_OfficialRate\");\r",
							"        }), console.log(pm.response.json())\r",
							"    );"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{curr_code}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}curr_byn",
					"host": [
						"{{url}}curr_byn"
					]
				}
			},
			"response": []
		}
	]
}