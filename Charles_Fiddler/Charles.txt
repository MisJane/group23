Charles
Сниффер (от англ. sniff — нюхать), или анализатор трафика — приложение, которое перехватывает данные (трафик), передающиеся по сети. Снифферы помогают локализовать ошибку передачи данных в приложениях.

Анализаторы трафика помогают:
	* Разобраться, как работает приложение: ты поймёшь взаимосвязь между действиями пользователя и отправкой запроса. Это может пригодиться, если в проекте неполная документация и тебе нужно добыть информацию самостоятельно.
	* Быстрее тестировать: со сниффером тебе не нужно перенастраивать бэкенд, чтобы получить конкретный ответ от него. Можно просто подменить запрос в инструменте и получить нужный на клиенте результат.
	* Локализовать ошибку. Сниффер позволяет просматривать запросы и ответы, которые не видны пользователю при обычной работе. Те запросы и ответы, которые вызывают ошибку, полезно прикладывать в баг-репорт. Так разработчику будет проще её локализовать.
	* Тестировать клиент и сервер раздельно. Например, когда клиент уже написан, а бэкенд — ещё нет. Тогда нужно настроить инструмент, чтобы он имитировал ответы сервера.

В Charles можно просматривать запросы в режимах Sequence и Structure
В режиме Sequence ресурсы отображаются в хронологическом порядке: от недавнего — к старым.
Интерфейс в режиме Sequence делится на два блока. В верхнем можно посмотреть все запросы, а в нижнем — изучить запрос или ответ детально.
Поле Filter помогает быстро искать запросы: можно ввести только хост или весь запрос целиком.
В деталях запроса есть шесть вкладок: Overview, Request, Response, Summary, Chart, Notes. Тебе понадобятся Overview, Request, и Response. Количество вкладок может отличаться в разных версиях приложения.
В Overview можно посмотреть:
	URL запроса;
	Status — успешно ли выполнен запрос;
	Response Code — код ответа;
	Protocol — протокол;
	Method — метод.

Вкладка Request содержит информацию о запросе. В подвкладке Headers лежат заголовки запросов, а в Cookies — куки.
Вкладка Response содержат тело ответа. Можно выбрать, как его отобразить:
	Text — в виде текста;
	JSON Text — в отформатированном виде;
	Raw — ответ отобразится так, как он пришёл: в «сыром» виде.
	
В режиме Structure ресурсы группируются по хостам (host) и путям (path). Это помогает быстрее ориентироваться в данных.
Интерфейс Structure отличается от Sequence. Здесь окно делится вертикально: слева — запросы, рассортированные по хостам, справа — детали конкретного ресурса.

В режиме Structure через поле Filter можно искать только по хосту: ввести ресурс целиком не получится.

Structure больше подходит для исследования: когда знаешь, с какого хоста должен прийти запрос, но не знаешь, какой конкретно. Тогда можно отслеживать запросы с определённого хоста.

Charles: ручное изменение ответа от бэкенда
В Charles можно перехватывать и подменять запросы или ответы. Это полезно, когда нужно быстро протестировать отображение данных на фронтенде.

Можно вводить разные адреса и проверять, как отображаются разные диапазоны, но это долго. На помощь приходит Charles: через него легко подменить ответ бэкенда и подставить нужный параметр.

Чтобы загрузить данные для отображения страницы, браузер делает запросы на сервер. В ответе приходят картинки, тексты, результаты расчётов и многое другое.
Открой DevTools: в ресурсах можно посмотреть, какой запрос отправил фронтенд и какой ответ дал бэкенд.

Твоя задача — найти в Charles ресурс, перехватить ответ и подставить нужное значение. Тогда фронтенд получит уже исправленную версию ответа.

Breakpoints — это остановка запроса. Когда его останавливают, можно редактировать содержимое. Чтобы завершить запрос, пользователь должен дать команду продолжить запрос.

Настройка Breakpoints
В общем списке ресурсов кликни правой кнопкой мыши по ресурсу, чей ответ будешь перехватывать. Появится список команд. Выбери Breakpoints: это действие добавит запрос в список на перехват.
Выбери пункт меню Proxy → Breakpoint Settings. Появится окно с настройками.

В окне будут отображаться все запросы с Breakpoints.
Напротив URL есть чекбокс: он включает и выключает Breakpoints для конкретного запроса.
В этот список можно добавить или удалить из него определённый запрос — обрати внимание на кнопки Add и Remove.
Теперь проверь, что напротив Enable Breakpoints и URL запроса чекбоксы включены.
Открой окно редактирования Breakpoints (Edit Breakpoints): кликни по запросу дважды.
Появилось всплывающее окно с предзаполненными полями. Проверь их содержимое:
	Scheme: можно выбрать HTTP-метод GET или POST.
	Protocol: https.
	Host: dcb7ed55-4abc-4828-bc92-e4727b5bfe93.serverhub.ru. //Это пример, у тебя он будет отличаться.
	Port: 443 — этот порт используют все HTTPS-запросы.
	Path: /api/v1/estimate. //пример
	Query: byAuto=2.7&byLegs=3. //пример конечно

Чекбоксы Request и Response позволяют выбрать, будет ли перехвачен только запрос, только ответ или и то, и другое. Убери галочку Request и оставь Response: тебе нужно изменить только ответы бэкенда.
Нажми ОК. :)
Обновись
Запрос остановился, открылось окно редактирования запроса (Breakpoints).
В левой части этого окна отображаются все перехваченные запросы или ответы: стрелочка вверх — перехвачен запрос, стрелочка вниз — перехвачен ответ.
В правой части отображаются детали запроса или ответа.
Если всё настроено верно, в левой части экрана отобразится только ответ на запрос с оценкой — Charles перехватит только его. Остальных ответов не будет видно.
Чтобы отредактировать ответ в верхней части окна, кликни по надписи Edit Response... (не обновляй страницу)

Rewrite: автоматическая подмена
В Charles есть несколько инструментов, которые помогут выполнить эту задачу: Rewrite и Map Local.
Rewrite: автоматическая подмена
Этот инструмент помогает настроить правила, по которым содержимое определённых запросов и ответов будет меняться автоматически. (Сперва отключи настройку Breakpoints для ручной подмены.  Если этого не сделать, сработает Breakpoints, а автоматическая подмена не сработает. Настройка выключается здесь: пункт меню Proxy → Disable Breakpoints.)
Настройка Rewrite
в раздел Tools выбери Rewrite - Enable Rewrite - add
Location
Type/Action
Rewrite Rule - Type

Charles берёт значение из поля Match Value, и, если в Body находится совпадение, оно меняется на значение из Replace Value. Меняется определённая часть, а не весь ответ.

Map Local: автоматическая подмена из файла
Данные в формате JSON заранее готовят в текстовом файле — ты можешь создать библиотеку файлов для подмены и пользоваться ими. Map Local применяют, если нужно заменить не несколько параметров, как в Rewrite, а весь запрос или ответ.


else
https://www.charlesproxy.com/documentation/welcome/